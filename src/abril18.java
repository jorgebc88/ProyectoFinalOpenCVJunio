import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

import org.bytedeco.javacpp.opencv_core.*;
import org.bytedeco.javacpp.opencv_core.CvMat;
import org.bytedeco.javacpp.opencv_video.BackgroundSubtractorMOG2;
import org.bytedeco.javacv.Blobs;
import org.bytedeco.javacv.JavaCV;


public class abril18 {
    static {
    	System.
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }
    static CvMat imag = null, imag2 = null;
    
    public static void main(String[] args) {
        JFrame jframe = new JFrame("OPenCV");
        jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JLabel vidpanel = new JLabel();
        jframe.setContentPane(vidpanel);
        jframe.setSize(640, 480);
        jframe.setVisible(true);
 
        CvMat frame = new CvMat();
        CvMat outerBox = new CvMat();
        CvMat diff_frame = null;
        CvMat tempon_frame = null;
        ArrayList<Rect> array = new ArrayList<Rect>();
        Blobs b = new Blobs();
        b.
        VideoCapture camera = new VideoCapture(
                "C:/video.avi");
        Size sz = new Size(640, 480);
        int i = 0;
        BackgroundSubtractorMOG2 pMOG = new BackgroundSubtractorMOG2();
	    CvMat fgMaskMOG = new CvMat(); //fg mask generated by MOG method
	    camera.set(1, 250);
	    CvMatOfKeyPoint CvMatOfKeyPoints = new CvMatOfKeyPoint();
	    CvMatOfKeyPoint CvMatOfKeyPoints2 = new CvMatOfKeyPoint();
        FeatureDetector blobDetector = FeatureDetector.create(FeatureDetector.SURF);
        DescriptorExtractor descriptorExtractor = DescriptorExtractor.create(DescriptorExtractor.SIFT);
        DescriptorCvMatcher descriptorCvMatcher = DescriptorCvMatcher.create(DescriptorCvMatcher.BRUTEFORCE);
	    List<KeyPoint> keyPoints;
        while (true) {
            if (camera.read(frame)) {
                //Imgproc.resize(frame, frame, sz);
                imag = frame.clone();
                outerBox = new CvMat(frame.size(), CvType.CV_8UC1);
                Imgproc.cvtColor(frame, outerBox, Imgproc.COLOR_BGR2GRAY);
                pMOG.apply(outerBox,outerBox,0.9);
                Imgproc.GaussianBlur(outerBox, outerBox, new Size(5, 5), 50);
                Imgproc.morphologyEx(outerBox, outerBox, Imgproc.MORPH_CLOSE,new CvMat(),new Point(),1);
                Imgproc.morphologyEx(outerBox, outerBox, Imgproc.MORPH_OPEN,new CvMat(),new Point(),1);
 
                if (i == 0) {
                    jframe.setSize(frame.width(), frame.height());
                    diff_frame = new CvMat(outerBox.size(), CvType.CV_8UC1);
                    tempon_frame = new CvMat(outerBox.size(), CvType.CV_8UC1);
                    diff_frame = outerBox.clone();
                    /*imag2=imag;
                    blobDetector.detect(imag, CvMatOfKeyPoints,outerBox);
                    CvMatOfKeyPoints2=CvMatOfKeyPoints;*/
                }
 
                if (i == 1) {
                	Core.absdiff(outerBox, tempon_frame, diff_frame);
                	//Imgproc.boxFilter(outerBox, outerBox, 100, new Size(10, 10));
                    Imgproc.adaptiveThreshold(outerBox, diff_frame, 255,
                            Imgproc.ADAPTIVE_THRESH_MEAN_C,
                    Imgproc.THRESH_BINARY_INV, 5, 2);
                    
                    blobDetector.detect(imag, CvMatOfKeyPoints,outerBox);
                    System.out.println("Detected " + CvMatOfKeyPoints.size()+ " blobs in the image");
                    Features2d.drawKeypoints(imag, CvMatOfKeyPoints, imag,new Scalar(2,254,255),Features2d.NOT_DRAW_SINGLE_POINTS);
                    
                    //descriptorExtractor.compute(imag, CvMatOfKeyPoints, new CvMat());
                    //Features2d.drawKeypoints(imag, CvMatOfKeyPoints, imag,new Scalar(2,254,255),Features2d.NOT_DRAW_SINGLE_POINTS);
                    System.out.println(CvMatOfKeyPoints.cols()+"/"+CvMatOfKeyPoints.rows());
                    /*CvMatOfKeyPoints.convertTo(outerBox, CvType.CV_32SC1);
                    for(int j=0;j<CvMatOfKeyPoints.cols();j++){
                    	for(int l=0;l<CvMatOfKeyPoints.rows();l++){
                    		System.out.println(CvMatOfKeyPoints.get(l, j));
                    	}
                    }
                    
                    
                	array = detection_contours(outerBox);
                    
                    if (array.size() > 0) {
                        Iterator<Rect> it2 = array.iterator();
                        while (it2.hasNext()) {
                            Rect obj = it2.next();
                            Core.rectangle(imag, obj.br(), obj.tl(),
                                    new Scalar(0, 255, 0), 1);
                        }
                    }*/
                }
 
                i = 1;
 
                ImageIcon image = new ImageIcon(CvMat2bufferedImage(imag));
                vidpanel.setIcon(image);
                vidpanel.repaint();
                tempon_frame = outerBox.clone();
                CvMatOfKeyPoints2=CvMatOfKeyPoints;
                imag2=imag;
               
            }
            if(camera.get(1) == camera.get(7)){
            	camera.set(1, 20);
			}
            
         }
    }
 
    public static BufferedImage CvMat2bufferedImage(CvMat image) {
        CvMatOfByte byteCvMat = new CvMatOfByte();
        Highgui.imencode(".jpg", image, byteCvMat);
        byte[] bytes = byteCvMat.toArray();
        InputStream in = new ByteArrayInputStream(bytes);
        BufferedImage img = null;
        try {
            img = ImageIO.read(in);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return img;
    }
 
    public static ArrayList<Rect> detection_contours(CvMat outCvMat) {
        CvMat v = new CvMat();
        CvMat vv = outCvMat.clone();
        List<CvMatOfPoint> contours = new ArrayList<CvMatOfPoint>();        
        Imgproc.findContours(vv, contours, v, Imgproc.RETR_CCOMP,
                Imgproc.CHAIN_APPROX_SIMPLE);
        double maxArea = 40000;
        int maxAreaIdx = -1;
        Rect r = null;
        ArrayList<Rect> rect_array = new ArrayList<Rect>();
        for (int idx = 0; idx < contours.size(); idx++) {
            CvMat contour = contours.get(idx);
            double contourarea = Imgproc.contourArea(contour);
            
            System.out.println("Hi: "+v.toString()+"\n"+v.cols()+"\n"+v.rows());
            System.out.println("Contour: " +contour.toString()+"\n"+contour.cols()+"\n"+contour.rows());
            if (contourarea > maxArea ) 
            {
                //maxArea = contourarea;
                maxAreaIdx = idx;
                r = Imgproc.boundingRect(contours.get(maxAreaIdx));
                rect_array.add(r);
                Imgproc.drawContours(imag, contours, maxAreaIdx, new Scalar(0,0, 255),1);
            }
 
        }
 
        v.release();
 
        return rect_array;
    }
   }

